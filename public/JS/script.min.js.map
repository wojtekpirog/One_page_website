{"version":3,"sources":["script.js"],"names":["root","navbar","burgerBtn","navbarItems","navbarOverlay","burgerBtnBars","scrollToTopButton","allSections","fullname","email","textarea","clearBtn","submitBtn","modal","modalShadow","modalCloseButton","footerYear","prepareElements","document","documentElement","querySelector","querySelectorAll","addEventListeners","addEventListener","toggleNavbar","closeNavbar","scrollToTop","handleFormClear","handleFormSubmit","closeModal","window","setBurgerBtnColor","handleScrollToTop","event","preventDefault","forEach","input","value","clearError","checkForm","checkLength","checkEmailAddress","showModal","formInputs","showError","inputArray","length","minLength","maxLength","concat","previousElementSibling","textContent","slice","emailInput","test","message","style","borderColor","nextElementSibling","display","classList","contains","navbarItem","removeEventListener","openNavbar","handleNavLinkAnimation","add","remove","setAttribute","body","delay","item","toggle","setProperty","handleCurrentYear","year","Date","getFullYear","currentSection","scrollY","section","offsetTop","currentScrollPosition","maxScrollHeight","scrollHeight","clientHeight","Math","round","scrollTo","top","behavior","errorCount"],"mappings":"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","file":"script.min.js","sourcesContent":["let root;\nlet navbar;\nlet burgerBtn;\nlet navbarItems;\nlet navbarOverlay;\nlet burgerBtnBars;\nlet scrollToTopButton;\nlet allSections;\nlet fullname;\nlet email;\nlet textarea;\nlet error;\nlet clearBtn;\nlet submitBtn;\nlet modal;\nlet modalShadow;\nlet modalCloseButton;\nlet footerYear;\n\nconst main = () => {\n  prepareElements();\n  addEventListeners();\n  handleCurrentYear();\n}\n\nconst prepareElements = () => {\n  root = document.documentElement;\n  navbar = document.querySelector(\".navbar\");\n  burgerBtn = document.querySelector(\".burger-btn\");\n  navbarItems = document.querySelectorAll(\".navbar__link\");\n  navbarOverlay = document.querySelector(\".navbar__overlay\");\n  burgerBtnBars = document.querySelector(\".burger-btn__bars\");\n  scrollToTopButton = document.querySelector(\".scroll-to-top-button\");\n  allSections = document.querySelectorAll(\".section\");\n  fullname = document.querySelector(\"#fullname\");\n  email = document.querySelector(\"#email\");\n  textarea = document.querySelector(\"#message\");\n  error = document.querySelector(\".contact__form-error\");\n  clearBtn = document.querySelector(\".contact__form-btn--reset\");\n  submitBtn = document.querySelector(\".contact__form-btn--submit\");\n  modal = document.querySelector(\".modal\");\n  modalShadow = document.querySelector(\".modal-shadow\");\n  modalCloseButton = document.querySelector(\".modal__btn-close\");\n  footerYear = document.querySelector(\".footer__year\");\n}\n\nconst addEventListeners = () => {\n  burgerBtn.addEventListener(\"click\", toggleNavbar);\n  navbarOverlay.addEventListener(\"click\", closeNavbar);\n  scrollToTopButton.addEventListener(\"click\", scrollToTop);\n  clearBtn.addEventListener(\"click\", handleFormClear);\n  submitBtn.addEventListener(\"click\", handleFormSubmit);\n  modalCloseButton.addEventListener(\"click\", closeModal);\n  window.addEventListener(\"scroll\", setBurgerBtnColor);\n  window.addEventListener(\"scroll\", handleScrollToTop);\n}\n\nconst handleFormClear = (event) => {\n  event.preventDefault();\n  [fullname, email, textarea].forEach((input) => {\n    input.value = \"\";\n    clearError(input);\n  });\n}\n\nconst handleFormSubmit = (event) => {\n  event.preventDefault();\n\n  checkForm([fullname, email, textarea]);\n  checkLength([fullname, email, textarea]);\n  checkEmailAddress(email);\n  showModal();\n}\n\nconst checkForm = (formInputs) => {\n  formInputs.forEach((input) => {\n    if (input.value === \"\") {\n      showError(input, \"Pole jest puste!\");\n    } else {\n      clearError(input);\n    }\n  });\n}\n\nconst checkLength = (inputArray) => {\n  inputArray.forEach((input) => {\n    if (input.value.length < input.minLength || input.value.length > input.maxLength) {\n      showError(input, `Pole \"${input.previousElementSibling.textContent.slice(0, -2)}\" musi zawierać od ${input.minLength} do ${input.maxLength} znaków.`);\n    } else {\n      clearError(input);\n    }\n  });\n}\n\nconst checkEmailAddress = (emailInput) => {\n  const regExp = /^[\\w\\.-]+@[a-zA-Z\\d\\.-]+\\.[a-zA-Z]{2,}$/;\n  regExp.test(emailInput.value) ? clearError(emailInput) : showError(emailInput, \"Adres e-mail jest nieprawidłowy!\");\n}\n\nconst showError = (input, message) => {\n  input.style.borderColor = \"tomato\";\n  input.nextElementSibling.style.display = \"block\";\n  input.nextElementSibling.textContent = message;\n}\n\nconst clearError = (input) => {\n  input.style.borderColor = \"#333\";\n  input.nextElementSibling.textContent = \"\";\n  input.nextElementSibling.style.display = \"none\";\n}\n\nconst toggleNavbar = () => {\n  if (!navbar.classList.contains(\"navbar--active\")) {\n    // If the navigation is closed, open it\n    openNavbar();\n    // When clicked, each link inside the navigation should close the navigation\n    navbarItems.forEach((navbarItem) => {\n      navbarItem.addEventListener(\"click\", closeNavbar);\n    });\n  } else {\n    // If the navigation is open, close it\n    closeNavbar();\n    // When closing the navigation, the event listener should be removed from each link\n    navbarItems.forEach((navbarItem) => {\n      navbarItem.removeEventListener(\"click\", openNavbar);\n    });\n  }\n  \n  handleNavLinkAnimation();\n}\n\nconst openNavbar = () => {\n  navbar.classList.add(\"navbar--active\");\n  navbarOverlay.classList.add(\"navbar__overlay--active\");\n  burgerBtn.classList.add(\"burger-btn--active\");\n  burgerBtn.classList.remove(\"burger-btn--black-bars\");\n  burgerBtn.setAttribute(\"aria-expanded\", \"true\");\n  burgerBtn.setAttribute(\"aria-label\", \"Zamknij menu nawigacyjne\");\n  document.body.classList.add(\"no-scroll\");\n  burgerBtnBars.classList.remove(\"black-bars\");\n}\n\nconst closeNavbar = () => {\n  navbar.classList.remove(\"navbar--active\");\n  navbarOverlay.classList.remove(\"navbar__overlay--active\");\n  burgerBtn.classList.remove(\"burger-btn--active\");\n  burgerBtn.setAttribute(\"aria-expanded\", \"false\");\n  burgerBtn.setAttribute(\"aria-label\", \"Otwórz menu nawigacyjne\");\n  document.body.classList.remove(\"no-scroll\");\n  // When closing the navigation, set the color of the burger menu icon color based to the background color of the current section\n  setBurgerBtnColor();\n}\n\nconst handleNavLinkAnimation = () => {\n  let delay = 0;\n\n  navbarItems.forEach((item) => {\n    item.classList.toggle(\"navbar__link-animation\");\n    item.style.setProperty(\"animation-delay\", `${delay}ms`);\n    delay += 100;\n  });\n}\n\nconst handleCurrentYear = () => {\n  const year = new Date().getFullYear();\n  footerYear.textContent = year;\n}\n\nconst setBurgerBtnColor = () => {\n  // Current amount of scroll\n  const currentSection = window.scrollY;\n\n  allSections.forEach((section) => {\n    if (section.classList.contains(\"section--white\") && section.offsetTop <= currentSection) {\n      burgerBtn.classList.add(\"burger-btn--black-bars\");\n    } else if (!section.classList.contains(\"section--white\") && section.offsetTop <= currentSection) {\n      burgerBtn.classList.remove(\"burger-btn--black-bars\");\n    }\n  });\n}\n\nconst handleScrollToTop = () => {\n  // Get the current amount of scroll\n  const currentScrollPosition = window.scrollY;\n  // Get the total height of the document\n  const totalScrollHeight = root.scrollHeight;\n  // Get the current viewport height\n  const viewportHeight = root.clientHeight;\n  // Get the maximum scroll height\n  const maxScrollHeight = totalScrollHeight - viewportHeight;\n  // If the current scroll position is greater than half the maximum scroll height, show the scroll to top button\n  currentScrollPosition > Math.round(maxScrollHeight * 0.3)\n    ? scrollToTopButton.classList.remove(\"scroll-to-top-button--hidden\")\n    : scrollToTopButton.classList.add(\"scroll-to-top-button--hidden\");\n}\n\nconst scrollToTop = () => {\n  window.scrollTo({\n    top: 0,\n    behavior: \"smooth\"\n  });\n}\n\nconst showModal = () => {\n  let errorCount = 0;\n\n  [fullname, email, textarea].forEach((input) => {\n    if (input.nextElementSibling.style.display === \"block\") {\n      errorCount += 1;\n    }\n  })\n\n  if (errorCount === 0) {\n    modal.classList.add(\"active\", \"animation\");\n    modalShadow.classList.add(\"active\", \"animation\");\n  }\n}\n\nconst closeModal = () => {\n  modal.classList.remove(\"active\", \"animation\");\n  modalShadow.classList.remove(\"active\", \"animation\");\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", main);"]}